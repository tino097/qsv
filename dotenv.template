# .env TEMPLATE
# =============================================================================
# Customize this and copy it to a file named '.env' to the directory where you
# want qsv to use the environment variables specified.
#
# You can also copy the customized file to the directory where the qsv binary
# variant is stored and name it to the variant name for which you want the 
# environment variables settings to be the default (e.g. if qsv is in
# /usr/local/bin, copy the file to /usr/local/bin/qsv.env)
#
# On startup, qsv will try to use the '.env' file in the current working directory.
# If none is available, it will try to use the binary .env file.
# If no binary .env file is set, qsv will proceed with its default settings
# and the current environment variables.
#  
# Valid boolean values are (case-insensitive): true/t, false/f, yes/y,  no/n, 1, 0
# Invalid boolean values will be interpreted as false.
#
# Lines that start with a '#' are ignored.
# ==============================================================================

# single ascii character to use as delimiter.  Overrides `--delimiter` option.
# Defaults to "," (comma) for CSV files & "\t" (tab) for TSV files when not set.
# Note that this will also set the delimiter for qsv's output to stdout.
# However, using the `--output` option, regardless of this environment variable,
# will automatically change the delimiter used in the generated file based on
# the file extension - i.e. comma for `.csv`, tab for `.tsv` & `.tab` files.
# QSV_DEFAULT_DELIMITER = , 

# if true, the delimiter is automatically detected. Overrides QSV_DEFAULT_DELIMITER
# and `--delimiter` option. Note that this does not work with stdin.
QSV_SNIFF_DELIMITER = False

# if true, the first row will **NOT** be interpreted as headers.
# Supersedes QSV_TOGGLE_HEADERS.
QSV_NO_HEADERS = False

# if set to `1`, toggles header setting - i.e. inverts qsv header behavior,
# with no headers being the default, & setting `--no-headers` will actually
# mean headers will not be ignored.
# QSV_TOGGLE_HEADERS = False

# set to the maximum number of characters when listing "antimodes" in `stats`. Otherwise, the default is 100.
# set to 0 to disable length limiting
# QSV_ANTIMODES_LEN = 100

# if set, specifies the minimum file size (in bytes) of a CSV file before an 
# index is automatically created. Note that stale indices are automatically 
# updated regardless of this setting.
# QSV_AUTOINDEX_SIZE = 1000000

# Specifies how the stats cache is used by "smart" commands.
# Valid values are:
#   auto - use the stats cache if it's valid (the stats-jsonl file exists and is current) - default.
#   force - if the cache does not exist, create it by running stats.
#   none - do not use the stats cache, even if it exists.
# QSV_STATSCACHE_MODE = auto

# if set, add a BOM (Byte Order Mark) to the beginning of the output.
# Note that this will also set the BOM for qsv's output to stdout.
# This is useful when generating CSV files for Excel on Windows.
# QSV_OUTPUT_BOM = False

# The directory to use for caching various qsv files.
# Used by the `geocode` command for downloaded geocoding resources.
# Used by the `luau`` command for downloaded lookup_table resources using
# the `luau` qsv_register_lookup() helper function and the `geocode` command
# for downloaded geocoding resources.
# QSV_CACHE_DIR = ~/.qsv-cache

# The CKAN Action API endpoint to use with the `luau` qsv_register_lookup()
# helper function when using the "ckan://" scheme.
# QSV_CKAN_API = https://<your_ckan_site_url>/api/3/action

# The CKAN token to use with the `luau` qsv_register_lookup() helper function
# when using the "ckan://" scheme. Only required to access private resources.
# QSV_CKAN_TOKEN = YOUR_CKAN_API_TOKEN

# The API key of the supported LLM service to use with the `describegpt` command.
# QSV_LLM_APIKEY = YOUR_LLM_APIKEY

# set to an ascii character. If set, any lines(including the header) that start
# with this character are ignored. Note that when you want to use the pound sign
# as a comment char, you need to enclose it in single quotes as its a reserved
# character for dotenv files, e.g.
QSV_COMMENT_CHAR: '#'

# Otherwise, you can just use the character without enclosing it in single quotes
# QSV_COMMENT_CHAR = !

# number of jobs to use for multithreaded commands (currently `apply`, `applydp`, 
# `dedup`, `diff`, `extsort`, `frequency`, `joinp`, `schema`, `snappy`, `sort`, `split`,
# `stats`, `to`, `tojsonl` & # `validate`). If not set, max_jobs is set to the detected
# number of logical processors.  See PERFORMANCE-Multithreading section for more info.
# QSV_MAX_JOBS = 8

# if true, prohibit self-update version check for the latest qsv release 
# published on GitHub.
QSV_NO_UPDATE = False

# if true, date parsing will prefer DMY format. Otherwise, prefer MDY format.
# Dates like 01/02/03 will be interpreted as 2003-02-01 if true, 
# and 2003-01-02 if false.
# (used with `apply datefmt`, `schema`, `sniff` & `stats` commands).
QSV_PREFER_DMY = False

# if true, makes `search`, `searchset` & `replace` commands unicode-aware.
# For increased performance, these commands are not unicode-aware by default &
# will ignore unicode values when matching & will abort when unicode characters
# are used in the regex. Note that the `apply operations regex_replace`
# operation is always unicode-aware.
QSV_REGEX_UNICODE = False

# reader buffer size (default (bytes): 131,072 - 128k)
QSV_RDR_BUFFER_CAPACITY = 131072

# writer buffer size (default (bytes): 524,288 - 512k)
QSV_WTR_BUFFER_CAPACITY = 524288

# the percentage of free available memory required when running qsv in
# "non-streaming" mode (i.e. the entire file needs to be loaded into memory).
# If the incoming file is greater than the available memory after the headroom
# is subtracted, qsv will not proceed. Set to 0 to skip memory check.
# See Memory Management for more info.
# (default: (percent) 20 )
QSV_FREEMEMORY_HEADROOM_PCT = 20

# if true, check if input file size < AVAILABLE memory - HEADROOM (CONSERVATIVE mode)
# when running in "non-streaming" mode. Otherwise, qsv will only check if the
# input file size < TOTAL memory - HEADROOM (NORMAL mode). This is done to prevent
# Out-of-Memory errors. See Memory Management for more info.
QSV_MEMORY_CHECK = False

# desired level (default - off; `error`, `warn`, `info`, `trace`, `debug`).
# QSV_LOG_LEVEL = debug

# when logging is enabled, the directory where the log files will be stored.
# If the specified directory does not exist, qsv will attempt to create it.
# If not set, the log files are created in the directory where qsv was started.
# See Logging docs for more info.
# QSV_LOG_DIR = /tmp

# if set, log messages are written directly to disk, without buffering.
# Otherwise, log messages are buffered before being written to the log file
# (8k buffer, flushing every second).
# See https://docs.rs/flexi_logger/latest/flexi_logger/enum.WriteMode.html for details.
QSV_LOG_UNBUFFERED = False

# if true, enable the --progressbar option on the `apply`, `fetch`, `fetchpost`,
# `foreach`, `luau`, `py`, `replace`, `search`, `searchset`, `sortcheck` &
# `validate` commands.
QSV_PROGRESSBAR = False

# set time-to-live of diskcache cached values (default (seconds): 2419200 (28 days)).
QSV_DISKCACHE_TTL_SECONDS = 2419200

# if true, enables cache hits to refresh TTL of diskcache cached values.
QSV_DISKCACHE_TTL_REFRESH = False

# the `fetch` command can use Redis to cache responses.
# Set to connect to the desired Redis instance. (default: `redis:127.0.0.1:6379/1`).
# For more info on valid Redis connection string formats, 
# see https://docs.rs/redis/latest/redis/#connection-parameters.
QSV_REDIS_CONNSTR = redis:127.0.0.1:6379/1

# the `fetchpost` command can also use Redis to cache responses
# (default: `redis:127.0.0.1:6379/2`). Note that `fetchpost` connects to
# database 2, as opposed to `fetch` which connects to database 1.
QSV_FP_REDIS_CONNSTR = redis:127.0.0.1:6379/2

# the maximum Redis connection pool size. (default: 20).
QSV_REDIS_MAX_POOL_SIZE = 20

# set time-to-live of Redis cached values (default (seconds): 2419200 (28 days)).
QSV_REDIS_TTL_SECONDS = 2419200

# if true, enables cache hits to refresh TTL of Redis cached values.
QSV_REDIS_TTL_REFRESH = False

# for commands with a --timeout option (`fetch`, `fetchpost`, `luau`, `sniff` &
# `validate`), the number of seconds before a web request times out (default: 30).
QSV_TIMEOUT = 30

# the user agent string to use for web requests.
# When specifying a custom user agent, try to conform to the IETF RFC 7231 standard 
# (https://tools.ietf.org/html/rfc7231#section-5.5.3). For examples, see 
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent
# (default: <qsv_variant>/<version> (<target>; https://github.com/dathere/qsv)).
# QSV_USER_AGENT = qsv/0.99.1 (x86_64-apple-darwin; https://github.com/dathere/qsv)

# the filename of the Geonames index file you wish to use for geocoding.
# If not set, the `geocode` command will download the default index file for
# that qsv version and save it in the QSV_CACHE_DIR directory for future use.
# Set this only if you have prepared your own custom Geonames index file.
# Note that you have to copy the custom index file to the QSV_CACHE_DIR directory
# for it to be used by qsv.
# QSV_GEOCODE_INDEX_FILENAME = my-qsv-geocode-index.bincode
